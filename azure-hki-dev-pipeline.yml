pr: none
trigger: none

pool:
  name: Default

variables:
  image_name: 'hpi-front-next'
  image_tag: 'latest'
  publish_profile: 'AppServiceProfile.PublishSettings'

steps:
# Checkout code from the Azure Repo
- checkout: self
  displayName: 'Checkout Code'

- task: DownloadSecureFile@1
  displayName: 'Download Publish Profile'
  inputs:
    secureFile: $(publish_profile)

- script: |
    docker compose -f docker-compose.yml build
  displayName: 'Build Docker Image'

- script: |
    docker tag $(image_name):$(image_tag) $(image_name):$(Build.BuildId)
  displayName: 'Tag Docker Image'

- script: |
    docker save $(image_name):$(Build.BuildId) -o $(Build.ArtifactStagingDirectory)/$(image_name).tar
  displayName: 'Save Docker Image to Tar File'
  
- task: PublishBuildArtifacts@1
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)/$(image_name).tar'
    ArtifactName: 'docker-image'
  displayName: 'Publish Docker Image as an Artifact'

- task: AzureCLI@2
  inputs:
    azureSubscription: 'hki_automatic'
    scriptType: 'bash'
    scriptLocation: 'inlineScript'
    inlineScript: |
      publishProfile=$(cat $(Agent.TempDirectory)/$(publish_profile))
      user=$(echo $publishProfile | grep -oP '(?<=userName=").*?(?=")')
      pass=$(echo $publishProfile | grep -oP '(?<=userPWD=").*?(?=")')
      site=$(echo $publishProfile | grep -oP '(?<=publishUrl=").*?(?=")' | sed 's/ftp:\/\///')

      # Log in to Azure Web App using FTP credentials
      curl -u $user:$pass --ftp-ssl -T $(Build.ArtifactStagingDirectory)/$(image_name).tar ftp://$site/

      # Debug output
      echo "User: $user"
      echo "Pass: $pass"
      echo "Site: $site"

      # Log in to Azure Web App using FTP credentials
      curl -u $user:$pass --ftp-ssl ftp://$site/
      
      # Update the web app configuration to use the new Docker image
      # az webapp config container set --name '$(image_name)' --docker-custom-image-name $(image_name):$(Build.BuildId)
  displayName: 'Deploy Docker Image to Azure Web App'
